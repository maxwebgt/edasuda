/**
 * Telegram Bot for E-commerce
 * @lastModified 2025-02-22 17:03:33 UTC
 * @user maxwebgt
 */

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
const FormData = require('form-data');
const app = express();

// Get the Telegram Bot Token from environment variables
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
    console.error('Telegram bot token is missing in the environment variables.');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// In-memory state for flows and last messages for deletion
const userState = {};
const lastBotMessages = {};

function prepareReplyMarkup(options = {}) {
    console.log('[prepareReplyMarkup] Incoming options:', options);
    if (options.reply_markup) {
        try {
            const markup = typeof options.reply_markup === 'string'
                ? JSON.parse(options.reply_markup)
                : options.reply_markup;
            console.log('[prepareReplyMarkup] Parsed markup:', markup);
            if (markup.inline_keyboard) {
                console.log('[prepareReplyMarkup] Detected inline_keyboard. Returning inline markup.');
                return markup;
            }
        } catch (error) {
            console.error('[prepareReplyMarkup] Error parsing reply_markup:', error);
        }
    }
    const replyKeyboard = {
        keyboard: [
            ['üõç –ö–∞—Ç–∞–ª–æ–≥'],
            ['üìã –ó–∞–∫–∞–∑—ã'],
            ['‚ùì –ü–æ–º–æ—â—å'],
            ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
        ],
        resize_keyboard: true
    };
    console.log('[prepareReplyMarkup] Returning default reply keyboard:', replyKeyboard);
    return replyKeyboard;
}

async function sendMessageWithDelete(chatId, text, options = {}) {
    try {
        if (lastBotMessages[chatId]) {
            try {
                await bot.deleteMessage(chatId, lastBotMessages[chatId]);
                console.log(`[sendMessageWithDelete] Deleted previous message for chat ${chatId}`);
            } catch (error) {
                console.log(`[sendMessageWithDelete] Error deleting previous message: ${error.message}`);
            }
        }
        const replyMarkup = prepareReplyMarkup(options);
        const messageOptions = {
            ...options,
            reply_markup: replyMarkup
        };
        console.log(
            `[sendMessageWithDelete] Sending message to chat ${chatId} with text: "${text}" and options:`,
            messageOptions
        );
        const message = await bot.sendMessage(chatId, text, messageOptions);
        lastBotMessages[chatId] = message.message_id;
        console.log(`[sendMessageWithDelete] Message sent. ID: ${message.message_id}`);
        return message;
    } catch (error) {
        console.error('[sendMessageWithDelete] Error sending message:', error);
        throw error;
    }
}

async function sendPhotoWithDelete(chatId, photo, options = {}) {
    try {
        if (lastBotMessages[chatId]) {
            try {
                await bot.deleteMessage(chatId, lastBotMessages[chatId]);
                console.log(`[sendPhotoWithDelete] Deleted previous message for chat ${chatId}`);
            } catch (error) {
                console.log(`[sendPhotoWithDelete] Error deleting previous message: ${error.message}`);
            }
        }
        const replyMarkup = prepareReplyMarkup(options);
        const messageOptions = {
            ...options,
            reply_markup: replyMarkup
        };
        console.log(`[sendPhotoWithDelete] Sending photo to chat ${chatId} with options:`, messageOptions);
        const message = await bot.sendPhoto(chatId, photo, messageOptions);
        lastBotMessages[chatId] = message.message_id;
        console.log(`[sendPhotoWithDelete] Photo sent. ID: ${message.message_id}`);
        return message;
    } catch (error) {
        console.error('[sendPhotoWithDelete] Error sending photo:', error);
        throw error;
    }
}

const mainMenu = {
    reply_markup: {
        keyboard: [
            ['üõç –ö–∞—Ç–∞–ª–æ–≥'],
            ['üìã –ó–∞–∫–∞–∑—ã'],
            ['‚ùì –ü–æ–º–æ—â—å'],
            ['–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']
        ],
        resize_keyboard: true
    }
};

// Handler for /start command
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    console.log(`[onText /start] Received /start from chat ${chatId}`);

    const telegramLogin = msg.from.username || '';
    if (!telegramLogin) {
        console.error(`[onText /start] Telegram login is missing for chat ${chatId}. Cannot create user.`);
    } else {
        const apiUrlUsers = 'http://api:5000/api/users';
        try {
            console.log(`[onText /start] Fetching users from API to check for telegramId: ${telegramLogin}`);
            const response = await axios.get(apiUrlUsers);
            const users = response.data;
            const existingUser = users.find(u => u.telegramId === telegramLogin);
            if (!existingUser) {
                console.log(`[onText /start] No user found with telegramId "${telegramLogin}". Creating new user.`);
                const payload = {
                    telegramId: telegramLogin,
                    role: 'client',
                    username: telegramLogin
                };
                console.log(`[onText /start] Creating user with payload:`, payload);
                await axios.post(apiUrlUsers, payload);
                console.log(`[onText /start] New user created with telegramId: ${telegramLogin}`);
            } else {
                console.log(`[onText /start] User with telegramId "${telegramLogin}" already exists.`);
            }
        } catch (error) {
            console.error('[onText /start] Error during API call to check/create user:', error.message);
            if (error.response && error.response.data) {
                console.error('[onText /start] Error response data:', error.response.data);
            }
        }
    }

    await sendMessageWithDelete(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–≥–æ:', mainMenu);
});

// Inline button callbacks
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    console.log(`Received callback query from ${chatId}: ${data}`);

    if (data === 'view_products') {
        try {
            console.log('Fetching products from API');
            const response = await axios.get('http://api:5000/api/products');
            const products = response.data;
            console.log('Products:', products);
            if (products.length === 0) {
                await sendMessageWithDelete(chatId, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
                return;
            }
            const productButtons = products.map((product, index) => {
                return [{ text: product.name, callback_data: `product_${index}` }];
            });
            productButtons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
            userState[chatId] = { step: 'select_product', products };
            await sendMessageWithDelete(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', {
                reply_markup: JSON.stringify({ inline_keyboard: productButtons })
            });
        } catch (error) {
            console.error('Error fetching products:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.');
        }
    } else if (data.startsWith('product_')) {
        const index = parseInt(data.split('_')[1], 10);
        const selectedProduct = userState[chatId].products[index];
        const productInfo = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: ${selectedProduct.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${selectedProduct.description}\n–¶–µ–Ω–∞: ${selectedProduct.price} ‚ÇΩ`;
        userState[chatId] = {
            step: 'view_product',
            selectedProduct: selectedProduct,
            products: userState[chatId].products
        };
        const productActionButtons = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: 'üõç –ö—É–ø–∏—Ç—å', callback_data: 'buy_product' },
                        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_products' }
                    ]
                ]
            })
        };
        if (selectedProduct.filename || selectedProduct.image) {
            try {
                const filename = selectedProduct.filename || selectedProduct.image;
                const imageResponse = await axios.get(`http://api:5000/api/images/file/${filename}`, {
                    responseType: 'arraybuffer'
                });
                await sendPhotoWithDelete(chatId, Buffer.from(imageResponse.data), {
                    caption: productInfo,
                    ...productActionButtons
                });
            } catch (error) {
                console.error('Error sending photo:', error);
                await sendMessageWithDelete(chatId, productInfo, productActionButtons);
            }
        } else {
            await sendMessageWithDelete(chatId, productInfo, productActionButtons);
        }
    } else if (data === 'back_to_products') {
        const products = userState[chatId].products;
        const productButtons = products.map((product, index) => {
            return [{ text: product.name, callback_data: `product_${index}` }];
        });
        productButtons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
        userState[chatId].step = 'select_product';
        await sendMessageWithDelete(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', {
            reply_markup: JSON.stringify({ inline_keyboard: productButtons })
        });
    } else if (data === 'back_to_main') {
        userState[chatId] = { step: 'main_menu' };
        await sendMessageWithDelete(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–≥–æ:', mainMenu);
    } else if (data === 'buy_product') {
        userState[chatId].step = 'enter_quantity';
        await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');
    } else if (data === 'add_product') {
        userState[chatId] = { step: 'add_product_name' };
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (data === 'help') {
        await sendMessageWithDelete(chatId, '–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n2. –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç');
    }
});

// Handling text messages
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text === 'üõç –ö–∞—Ç–∞–ª–æ–≥') {
        try {
            const response = await axios.get('http://api:5000/api/products');
            const products = response.data;
            if (products.length === 0) {
                await sendMessageWithDelete(chatId, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
                return;
            }
            const productButtons = products.map((product, index) => {
                return [{ text: product.name, callback_data: `product_${index}` }];
            });
            productButtons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
            userState[chatId] = {
                step: 'select_product',
                products,
                telegramId: msg.from.username
            };
            await sendMessageWithDelete(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', {
                reply_markup: JSON.stringify({ inline_keyboard: productButtons })
            });
        } catch (error) {
            console.error('Error fetching products:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.');
        }
        return;
    }

    if (text === 'üìã –ó–∞–∫–∞–∑—ã') {
        const ordersUrl = `http://api:5000/api/orders/client/${chatId}`;
        console.log(`[–ó–∞–∫–∞–∑—ã] Requesting orders from URL: ${ordersUrl}`);
        try {
            const response = await axios.get(ordersUrl);
            const orders = response.data;
            if (orders.length === 0) {
                await sendMessageWithDelete(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
                return;
            }
            let ordersList = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
            orders.forEach((order, index) => {
                ordersList += `–ó–∞–∫–∞–∑ ‚Ññ${index + 1}\n`;
                ordersList += `–°—Ç–∞—Ç—É—Å: ${order.status}\n`;
                ordersList += `–°—É–º–º–∞: ${order.totalAmount} ‚ÇΩ\n`;
                ordersList += `–ê–¥—Ä–µ—Å: ${order.shippingAddress}\n`;
                ordersList += '---------------\n';
            });
            await sendMessageWithDelete(chatId, ordersList);
        } catch (error) {
            console.error('[–ó–∞–∫–∞–∑—ã] Error fetching orders:', error.message);
            console.error('[–ó–∞–∫–∞–∑—ã] Error details:', error.config);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.');
        }
        return;
    }

    if (text === '‚ùì –ü–æ–º–æ—â—å') {
        await sendMessageWithDelete(chatId, '–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n' +
            '1. üõç –ö–∞—Ç–∞–ª–æ–≥ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n' +
            '2. üìã –ó–∞–∫–∞–∑—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n' +
            '3. ‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
            '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:\n' +
            '1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥\n' +
            '2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä\n' +
            '3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"\n' +
            '4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞');
        return;
    }

    if (text === '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') {
        const managementMenu = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data: 'add_product' }],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                ]
            })
        };
        await sendMessageWithDelete(chatId, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', managementMenu);
        return;
    }

    if (!userState[chatId]) {
        return;
    }

    if (userState[chatId].step === 'add_product_name') {
        userState[chatId].productName = text;
        userState[chatId].step = 'add_product_description';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId].step === 'add_product_description') {
        userState[chatId].productDescription = text;
        userState[chatId].step = 'add_product_price';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId].step === 'add_product_price') {
        const price = parseFloat(text);
        if (isNaN(price) || price <= 0) {
            await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞.');
        } else {
            userState[chatId].productPrice = price;
            userState[chatId].step = 'add_product_category';
            await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:');
        }
    } else if (userState[chatId].step === 'add_product_category') {
        userState[chatId].productCategory = text;
        userState[chatId].step = 'add_product_image';
        await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId].step === 'add_product_image' && msg.photo) {
        const photo = msg.photo[msg.photo.length - 1];
        const fileId = photo.file_id;
        try {
            const fileLink = await bot.getFileLink(fileId);
            const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
            const buffer = Buffer.from(response.data);
            const timestamp = Date.now();
            const filename = `${timestamp}.jpg`;
            const form = new FormData();
            form.append('image', buffer, {
                filename: filename,
                contentType: 'image/jpeg'
            });
            const imageResponse = await axios.post('http://api:5000/api/images/upload', form, {
                headers: form.getHeaders()
            });
            const newProduct = {
                name: userState[chatId].productName,
                description: userState[chatId].productDescription,
                price: userState[chatId].productPrice,
                category: userState[chatId].productCategory,
                image: imageResponse.data.image.filename
            };
            await axios.post('http://api:5000/api/products', newProduct);
            await sendMessageWithDelete(chatId, `–ü—Ä–æ–¥—É–∫—Ç "${newProduct.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
            setTimeout(async () => {
                await sendMessageWithDelete(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–≥–æ:', mainMenu);
            }, 2000);
            delete userState[chatId];
        } catch (error) {
            console.error('Error creating product:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.');
        }
    } else if (userState[chatId].step === 'enter_quantity') {
        const quantity = parseInt(text);
        if (isNaN(quantity) || quantity <= 0) {
            await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).');
            return;
        }
        userState[chatId].quantity = quantity;
        userState[chatId].step = 'enter_description';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è):');
    } else if (userState[chatId].step === 'enter_description') {
        userState[chatId].description = text;
        userState[chatId].step = 'enter_phone';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:');
    } else if (userState[chatId].step === 'enter_phone') {
        if (!/^\+?\d{10,12}$/.test(text.replace(/\s/g, ''))) {
            await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-12 —Ü–∏—Ñ—Ä).');
            return;
        }
        userState[chatId].phone = text;
        userState[chatId].step = 'enter_address';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:');
    } else if (userState[chatId].step === 'enter_address') {
        try {
            const order = {
                clientId: chatId.toString(),
                telegramId: msg.from.username || null,
                phone: userState[chatId].phone,
                products: [{
                    productId: userState[chatId].selectedProduct._id,
                    quantity: userState[chatId].quantity,
                    price: userState[chatId].selectedProduct.price
                }],
                description: userState[chatId].description,
                status: '–ù–æ–≤—ã–π',
                totalAmount: userState[chatId].selectedProduct.price * userState[chatId].quantity,
                paymentStatus: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                paymentMethod: '–ù–∞–ª–∏—á–Ω—ã–µ',
                paymentDetails: {
                    paidAmount: 0,
                    paymentDate: null,
                    transactionId: null,
                    paymentProvider: null,
                    receiptNumber: null
                },
                shippingAddress: text,
                deliveryInfo: {
                    type: '–ö—É—Ä—å–µ—Ä',
                    trackingNumber: null,
                    courierName: null,
                    courierPhone: null,
                    estimatedDeliveryDate: null,
                    actualDeliveryDate: null,
                    deliveryInstructions: userState[chatId].description
                },
                contactEmail: `${chatId}@telegram.com`,
                contactPhone: userState[chatId].phone,
                statusHistory: [{
                    status: '–ù–æ–≤—ã–π',
                    timestamp: new Date(),
                    comment: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞',
                    updatedBy: 'system'
                }]
            };
            console.log('Creating order with data:', JSON.stringify(order, null, 2));
            await axios.post('http://api:5000/api/orders', order);
            const orderInfo = `–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
                `–ü—Ä–æ–¥—É–∫—Ç: ${userState[chatId].selectedProduct.name}\n` +
                `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${userState[chatId].quantity}\n` +
                `–°—É–º–º–∞: ${order.totalAmount} ‚ÇΩ\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: ${userState[chatId].phone}\n` +
                `–ê–¥—Ä–µ—Å: ${text}\n` +
                `–û–ø–∏—Å–∞–Ω–∏–µ: ${userState[chatId].description}\n\n` +
                `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${order.status}\n` +
                `–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${order.paymentStatus}`;
            await sendMessageWithDelete(chatId, orderInfo);
            setTimeout(async () => {
                await sendMessageWithDelete(chatId, '–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', mainMenu);
            }, 2000);
            delete userState[chatId];
        } catch (error) {
            console.error('Error creating order:', error);
            const errorMessage = error.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞';
            await sendMessageWithDelete(chatId, `–û—à–∏–±–∫–∞: ${errorMessage}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
            setTimeout(async () => {
                await sendMessageWithDelete(chatId, '–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', mainMenu);
            }, 2000);
        }
    }
});

app.listen(5001, () => {
    console.log('Telegram bot is running on port 5001');
});