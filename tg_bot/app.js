require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
const app = express();

// –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) {
    console.error('Telegram bot token is missing in the environment variables.');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
const userState = {};

const mainMenu = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{ text: 'üõí–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'view_products' }],
            [{ text: '–ü–æ–º–æ—â—å', callback_data: 'help' }]
        ]
    })
};

// –ö–æ–º–∞–Ω–¥–∞ /start (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–≥–æ:', mainMenu);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'view_products') {
        try {
            const response = await axios.get('http://api:5000/api/products'); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π URL —Ç–≤–æ–µ–≥–æ API
            const products = response.data;

            let productList = '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n';
            products.forEach(product => {
                productList += `${product.id}. ${product.name}\n`;
            });

            userState[chatId] = { step: 'select_product', products };
            bot.sendMessage(chatId, productList + '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1" –¥–ª—è –°–æ—Å–∏—Å–æ–∫).');
        } catch (error) {
            console.error('Error fetching products:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.');
        }
    } else if (data === 'help') {
        bot.sendMessage(chatId, '–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã /view_products\n2. –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (userState[chatId] && userState[chatId].step === 'select_product') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞
        const selectedProduct = userState[chatId].products.find(p => p.id === parseInt(text));

        if (selectedProduct) {
            userState[chatId].selectedProduct = selectedProduct;
            userState[chatId].step = 'select_quantity';

            bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selectedProduct.name}. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2).`);
        } else {
            bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.');
        }
    } else if (userState[chatId] && userState[chatId].step === 'select_quantity') {
        const quantity = parseInt(text);

        if (isNaN(quantity) || quantity <= 0) {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.');
        } else {
            const order = {
                productId: userState[chatId].selectedProduct.id,
                quantity,
                userId: chatId
            };

            try {
                const response = await axios.post('http://localhost:5000/api/orders', order); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
                bot.sendMessage(chatId, `–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ü—Ä–æ–¥—É–∫—Ç: ${userState[chatId].selectedProduct.name}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}`);
            } catch (error) {
                console.error('Error creating order:', error);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.');
            }

            // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            delete userState[chatId];
        }
    } else {
        bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
    }
});

// –ù–∞—Å—Ç—Ä–æ–∏–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
app.listen(5001, () => {
    console.log('Telegram bot is running on port 5001');
});
