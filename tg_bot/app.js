/**
 * Telegram Bot for E-commerce
 * @lastModified 2025-02-23 07:15:00 UTC
 * @user maxwebgt
 *
 * This solution notifies the user who placed an order about any status changes.
 * After updating the order status via a callback (update_status), the bot updates the
 * order via the API and sends a notification in the chat that performed the update.
 * In addition, it always sends a notification to the order creator using the clientId
 * (field order.clientId), even if that user is the one performing the operation.
 *
 * Change: For "regular orders" (i.e. not "My orders") the additional information view includes
 * a "Cancel Order" button.
 *
 * New Functionality: When a client cancels an order (via the "cancel_order" button) the bot
 * will additionally notify all chefs associated with the products in that order. For each product,
 * the chefId is used as the chat id to send a notification.
 */

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
const FormData = require('form-data');
const app = express();

// Get the Telegram Bot Token from environment variables
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
    console.error('Telegram bot token is missing in the environment variables.');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// In-memory state for flows and last messages for deletion
const userState = {};
const lastBotMessages = {};

/**
 * Helper to check byte length in UTF-8.
 */
function getByteLength(str) {
    return Buffer.byteLength(str, 'utf8');
}
/**
 * Gets user role from API
 */
async function getUserRole(chatId) {
    if (!chatId) {
        console.error('[getUserRole] chatId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω');
        return null;
    }

    try {
        console.log(`[getUserRole] –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}`);
        const response = await axios.get(`http://api:5000/api/users/telegram/${chatId}`);
        console.log(`[getUserRole] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, response.data);
        return response.data.role;
    } catch (error) {
        console.error(`[getUserRole] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}:`, error.message);
        return null;
    }
}
/**
 * Prepares reply markup for messages.
 * If inline_keyboard is provided, returns it; else returns the default keyboard.
 */
async function prepareReplyMarkup(options = {}, chatId) {
    console.log('[prepareReplyMarkup] Incoming options:', options);
    if (options.reply_markup) {
        try {
            const markup = typeof options.reply_markup === 'string'
                ? JSON.parse(options.reply_markup)
                : options.reply_markup;
            console.log('[prepareReplyMarkup] Parsed markup:', markup);
            if (markup.inline_keyboard) {
                console.log('[prepareReplyMarkup] Detected inline_keyboard. Returning inline markup.');
                return markup;
            }
        } catch (error) {
            console.error('[prepareReplyMarkup] Error parsing reply_markup:', error);
        }
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log(`[prepareReplyMarkup] –ó–∞–ø—Ä–æ—Å —Ä–æ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å chatId: ${chatId}`);
        const userRole = await getUserRole(chatId.toString());
        console.log(`[prepareReplyMarkup] –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}: ${userRole}`);

        const keyboard = [
            ['üçû –ö–∞—Ç–∞–ª–æ–≥', 'üìã –ó–∞–∫–∞–∑—ã']
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤–∞—Ä–æ–≤
        if (userRole === 'chef') {
            keyboard.push(['‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']);
        }

        keyboard.push(['‚ùì –ü–æ–º–æ—â—å']);

        const replyKeyboard = {
            keyboard: keyboard,
            resize_keyboard: true,
        };

        console.log('[prepareReplyMarkup] Returning keyboard:', replyKeyboard);
        return replyKeyboard;
    } catch (error) {
        console.error('[prepareReplyMarkup] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            keyboard: [
                ['üçû –ö–∞—Ç–∞–ª–æ–≥', 'üìã –ó–∞–∫–∞–∑—ã'],
                ['‚ùì –ü–æ–º–æ—â—å']
            ],
            resize_keyboard: true,
        };
    }
}

/**
 * Sends a message to a chat and deletes the last sent message (if exists).
 */
async function sendMessageWithDelete(chatId, text, options = {}) {
    try {
        if (lastBotMessages[chatId]) {
            try {
                await bot.deleteMessage(chatId, lastBotMessages[chatId]);
                console.log(`[sendMessageWithDelete] –£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
            } catch (error) {
                console.log(`[sendMessageWithDelete] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            }
        }

        console.log(`[sendMessageWithDelete] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ ${chatId}`);
        const replyMarkup = await prepareReplyMarkup(options, chatId);
        const messageOptions = { ...options, reply_markup: replyMarkup };

        console.log(`[sendMessageWithDelete] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, { text, options: messageOptions });
        const message = await bot.sendMessage(chatId, text, messageOptions);
        lastBotMessages[chatId] = message.message_id;
        console.log(`[sendMessageWithDelete] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. ID: ${message.message_id}`);
        return message;
    } catch (error) {
        console.error('[sendMessageWithDelete] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        throw error;
    }
}

/**
 * Sends a photo to a chat and deletes the last sent message (if exists).
 */
async function sendPhotoWithDelete(chatId, photo, options = {}) {
    try {
        if (lastBotMessages[chatId]) {
            try {
                await bot.deleteMessage(chatId, lastBotMessages[chatId]);
                console.log(`[sendPhotoWithDelete] Deleted previous message for chat ${chatId}`);
            } catch (error) {
                console.log(`[sendPhotoWithDelete] Error deleting previous message: ${error.message}`);
            }
        }
        const replyMarkup = await prepareReplyMarkup(options, chatId); // –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä chatId
        const messageOptions = { ...options, reply_markup: replyMarkup };
        console.log(`[sendPhotoWithDelete] Sending photo to chat ${chatId} with options:`, messageOptions);
        const message = await bot.sendPhoto(chatId, photo, messageOptions);
        lastBotMessages[chatId] = message.message_id;
        console.log(`[sendPhotoWithDelete] Photo sent. ID: ${message.message_id}`);
        return message;
    } catch (error) {
        console.error('[sendPhotoWithDelete] Error sending photo:', error);
        throw error;
    }
}

const mainMenu = {
    reply_markup: {
        keyboard: [
            ['üçû –ö–∞—Ç–∞–ª–æ–≥', 'üìã –ó–∞–∫–∞–∑—ã'],
            ['‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
            ['‚ùì –ü–æ–º–æ—â—å']
        ],
        resize_keyboard: true,
    },
};

//////////////////////
// Status mapping //
//////////////////////

// Map user-friendly statuses to short ASCII codes to keep callback_data compact.
const statusMap = {
    "–ù–æ–≤—ã–π": "new",
    "–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É": "in_work",
    "–ì–æ—Ç–æ–≤–∏—Ç—Å—è": "in_prep",
    "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ": "ready",
    "–í –¥–æ—Å—Ç–∞–≤–∫–µ": "delivering",
    "–î–æ—Å—Ç–∞–≤–ª–µ–Ω": "delivered",
    "–ó–∞–≤–µ—Ä—à—ë–Ω": "done",
    "–û—Ç–º–µ–Ω—ë–Ω": "cancelled",
    "–í–æ–∑–≤—Ä–∞—Ç": "refund"
};

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    console.log(`[onText /start] –ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId}, username: ${username || '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);

    const apiUrlUsers = 'http://api:5000/api/users';
    try {
        console.log(`[onText /start] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegramId: ${chatId}`);
        const response = await axios.get(apiUrlUsers);
        const users = response.data;
        const existingUser = users.find((u) => u.telegramId === chatId.toString());

        if (!existingUser) {
            console.log(`[onText /start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegramId "${chatId}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
            const payload = {
                telegramId: chatId.toString(),
                role: 'client',
                username: username || `user_${chatId}`,
                name: username || `user_${chatId}`  // –ò—Å–ø–æ–ª—å–∑—É–µ–º username –≤ –∫–∞—á–µ—Å—Ç–≤–µ name
            };
            console.log(`[onText /start] –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏:`, payload);
            await axios.post(apiUrlUsers, payload);
            console.log(`[onText /start] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å telegramId: ${chatId}, name: ${payload.name}`);
        } else {
            console.log(`[onText /start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegramId "${chatId}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
        }
    } catch (error) {
        console.error('[onText /start] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API:', error.message);
        if (error.response && error.response.data) {
            console.error('[onText /start] –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
        }
    }

    await sendMessageWithDelete(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üëãü•©üêüüçûü•ìüç≤', mainMenu);
});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;
    console.log(`Received callback query from ${chatId}: ${data}`);

    if (data.startsWith('view_order_')) {
        const orderId = data.split('_')[2];
        console.log(`[Order View] Viewing order with id: ${orderId}`);
        let orderDetails;
        try {
            const response = await axios.get(`http://api:5000/api/orders/${orderId}`);
            orderDetails = response.data;
            console.log(`[Order View] Retrieved order details:`, orderDetails);
        } catch (error) {
            console.error(`[Order View] Error fetching details for order ${orderId}:`, error.message);
            await sendMessageWithDelete(chatId, `–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ ${orderId}`);
            return;
        }
        const order = orderDetails.order || orderDetails;
        console.log('[Order View] Using order object:', order);
        let detailsText = `–ó–∞–∫–∞–∑ ‚Ññ${order._id}\n`;
        detailsText += `–°—Ç–∞—Ç—É—Å: ${order.status}\n`;
        detailsText += `–°—É–º–º–∞: ${order.totalAmount} ‚ÇΩ\n`;
        detailsText += `–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.shippingAddress}\n`;
        if (order.phone) detailsText += `–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n`;
        if (order.description) detailsText += `–û–ø–∏—Å–∞–Ω–∏–µ: ${order.description}\n`;
        if (order.paymentStatus) detailsText += `–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${order.paymentStatus}\n`;
        if (order.paymentMethod) detailsText += `–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${order.paymentMethod}\n`;
        if (order.contactEmail) detailsText += `Email: ${order.contactEmail}\n`;
        if (order.contactPhone) detailsText += `–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: ${order.contactPhone}\n`;
        if (order.statusHistory && order.statusHistory.length > 0) {
            detailsText += `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(order.statusHistory[0].timestamp).toLocaleString()}\n`;
        }
        if (order.products && order.products.length > 0) {
            detailsText += `\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n`;
            try {
                const productPromises = order.products.map(prod =>
                    axios.get(`http://api:5000/api/products/${prod.productId}`)
                        .then(res => ({
                            name: res.data.name,
                            quantity: prod.quantity,
                            price: prod.price
                        }))
                        .catch(err => ({
                            name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç',
                            quantity: prod.quantity,
                            price: prod.price
                        }))
                );
                const productDetails = await Promise.all(productPromises);
                productDetails.forEach((p, index) => {
                    detailsText += `  ${index + 1}. ${p.name} x${p.quantity} ‚Äî ${p.price} ‚ÇΩ –∑–∞ —à—Ç, –ò—Ç–æ–≥–æ: ${p.price * p.quantity} ‚ÇΩ\n`;
                });
            } catch (error) {
                console.error('Error fetching product details:', error);
            }
        }
        if (order.deliveryInfo && order.deliveryInfo.deliveryInstructions) {
            detailsText += `\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ: ${order.deliveryInfo.deliveryInstructions}\n`;
        }
        // For "My orders" show only status update buttons.
        // For regular orders, include a "Cancel Order" button.
        if (userState[chatId] && userState[chatId].orderListType === 'my_orders') {
            const statuses = [
                '–ù–æ–≤—ã–π',
                '–ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É',
                '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
                '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
                '–í –¥–æ—Å—Ç–∞–≤–∫–µ',
                '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
                '–ó–∞–≤–µ—Ä—à—ë–Ω',
                '–û—Ç–º–µ–Ω—ë–Ω',
                '–í–æ–∑–≤—Ä–∞—Ç'
            ];
            const inlineStatusButtons = [];
            for (let i = 0; i < statuses.length; i += 3) {
                const row = statuses.slice(i, i + 3).map(status => {
                    const shortStatus = statusMap[status] || status;
                    const callbackData = `update_status::${order._id}::${shortStatus}`;
                    console.log(`[Status Button] Generated callback_data: "${callbackData}", length: ${callbackData.length}, byte length: ${getByteLength(callbackData)}`);
                    return { text: status, callback_data: callbackData };
                });
                inlineStatusButtons.push(row);
            }
            inlineStatusButtons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'my_orders' }]);
            const inlineKeyboard = { inline_keyboard: inlineStatusButtons };
            await sendMessageWithDelete(chatId, detailsText, { reply_markup: JSON.stringify(inlineKeyboard) });
        } else {
            // Regular orders: add "Cancel Order" and "‚¨ÖÔ∏è Back" buttons.
            const inlineKeyboard = {
                inline_keyboard: [
                    [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: `cancel_order_${order._id}` }],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'orders_list' }]
                ]
            };
            await sendMessageWithDelete(chatId, detailsText, { reply_markup: JSON.stringify(inlineKeyboard) });
        }
    }
    else if (data.startsWith('update_status::')) {
        const parts = data.split("::");
        if (parts.length >= 3) {
            const orderId = parts[1];
            const newStatusCode = parts.slice(2).join("::");
            const userFriendlyStatus = Object.keys(statusMap)
                .find(key => statusMap[key] === newStatusCode) || newStatusCode;

            console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${orderId}`);
            console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: "${userFriendlyStatus}" (–∫–æ–¥: ${newStatusCode})`);
            console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${chatId}`);

            try {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const currentOrderResponse = await axios.get(`http://api:5000/api/orders/${orderId}`);
                const currentOrder = currentOrderResponse.data.order || currentOrderResponse.data;
                console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞:`, currentOrder);

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                const initiator = {
                    chatId: chatId.toString(),
                    isChef: currentOrder.chefId === chatId.toString(),
                    isClient: currentOrder.clientId === chatId.toString(),
                };
                console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è:`, initiator);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                const updateResponse = await axios.put(`http://api:5000/api/orders/${orderId}`, {
                    status: userFriendlyStatus
                });
                const updatedOrder = updateResponse.data.order || updateResponse.data;
                console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:`, updatedOrder);

                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
                const productPromises = currentOrder.products.map(async prod => {
                    try {
                        const productResponse = await axios.get(`http://api:5000/api/products/${prod.productId}`);
                        return {
                            ...prod,
                            name: productResponse.data.name,
                            chefId: productResponse.data.chefId
                        };
                    } catch (err) {
                        console.error(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ ${prod.productId}:`, err.message);
                        return prod;
                    }
                });

                const products = await Promise.all(productPromises);
                console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:`, products);

                // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const timestamp = new Date().toLocaleString('ru-RU', {
                    timeZone: 'Europe/Moscow',
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });

                const baseNotification =
                    `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞\n\n` +
                    `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${orderId.slice(-4)}\n` +
                    `üìù –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${userFriendlyStatus}\n` +
                    `üïí –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${timestamp}\n\n` +
                    `üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${updatedOrder.totalAmount} ‚ÇΩ\n` +
                    `üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${updatedOrder.shippingAddress}\n\n` +
                    `üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n`;

                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
                const productsInfo = products.map((prod, index) =>
                    `${index + 1}. ${prod.name || '–¢–æ–≤–∞—Ä'} x${prod.quantity} ‚Äî ${prod.price} ‚ÇΩ`
                ).join('\n');

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                let initiatorRole = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                if (initiator.isChef) initiatorRole = '–ü–æ–≤–∞—Ä';
                else if (initiator.isClient) initiatorRole = '–ö–ª–∏–µ–Ω—Ç';

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                if (updatedOrder.clientId) {
                    const clientNotification =
                        `${baseNotification}${productsInfo}\n\n` +
                        `${initiator.isClient ? 'üîî –í—ã –∏–∑–º–µ–Ω–∏–ª–∏' : `üë®‚Äçüç≥ ${initiatorRole} –∏–∑–º–µ–Ω–∏–ª`} —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞\n` +
                        `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${updatedOrder.description || '–ù–µ—Ç'}\n` +
                        `üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–≤–∞—Ä–∞: ${updatedOrder.chefPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

                    try {
                        await bot.sendMessage(updatedOrder.clientId, clientNotification);
                        console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${updatedOrder.clientId}`);
                    } catch (error) {
                        console.error(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${updatedOrder.clientId}:`, error.message);
                    }
                }

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤–∞—Ä–∞–º
                const uniqueChefIds = [...new Set(products.map(p => p.chefId))];
                console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –ù–∞–π–¥–µ–Ω—ã –ø–æ–≤–∞—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, uniqueChefIds);

                for (const chefId of uniqueChefIds) {
                    if (chefId) {
                        const chefNotification =
                            `${baseNotification}${productsInfo}\n\n` +
                            `${chefId === initiator.chatId ? 'üîî –í—ã –∏–∑–º–µ–Ω–∏–ª–∏' : `üë§ ${initiatorRole} –∏–∑–º–µ–Ω–∏–ª`} —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n` +
                            `üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${updatedOrder.description || '–ù–µ—Ç'}\n` +
                            `üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:\n` +
                            `   –¢–µ–ª–µ—Ñ–æ–Ω: ${updatedOrder.contactPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                            `   Telegram: ${updatedOrder.telegramId ? '@' + updatedOrder.telegramId : '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

                        try {
                            await bot.sendMessage(chefId, chefNotification);
                            console.log(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤–∞—Ä—É ${chefId}`);
                        } catch (error) {
                            console.error(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≤–∞—Ä—É ${chefId}:`, error.message);
                        }
                    }
                }

                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç, –≥–¥–µ –±—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                await sendMessageWithDelete(chatId, `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId.slice(-4)} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${userFriendlyStatus}"`);

            } catch (error) {
                console.error(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –û—à–∏–±–∫–∞:`, error.message);
                if (error.response?.data) {
                    console.error(`[–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞] –û—à–∏–±–∫–∞ API:`, error.response.data);
                }
                await sendMessageWithDelete(chatId, `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId.slice(-4)}`);
            }
        }
    }
    else if (data === 'expenses_menu') {
        const expensesMenu = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: 'üìä –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã', callback_data: 'view_expenses' }],
                    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', callback_data: 'add_expense' }],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_management' }]
                ],
            }),
        };
        await sendMessageWithDelete(chatId, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏:', expensesMenu);
    }
    else if (data === 'view_expenses') {
        try {
            const response = await axios.get(`http://api:5000/api/expenses/chef/${chatId}`);
            const expenses = response.data;

            if (expenses.length === 0) {
                await sendMessageWithDelete(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.');
                return;
            }

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤
            const totalAmount = expenses.reduce((sum, expense) => sum + (expense.amount || 0), 0);

            let expensesList = '–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n\n';
            expensesList += `üíµ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${totalAmount} ‚ÇΩ\n\n`;
            expensesList += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞—Å—Ö–æ–¥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n';

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≥–¥–µ –∫–∞–∂–¥—ã–π —Ä–∞—Å—Ö–æ–¥ - –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
            const inlineKeyboard = expenses.map(expense => ([{
                text: `${expense.title} - ${expense.amount} ‚ÇΩ`,
                callback_data: `view_expense_${expense._id}`
            }]));

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            inlineKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'expenses_menu' }]);

            const keyboard = {
                reply_markup: JSON.stringify({
                    inline_keyboard: inlineKeyboard
                })
            };

            await sendMessageWithDelete(chatId, expensesList, keyboard);
        } catch (error) {
            console.error('Error fetching expenses:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.');
        }
    }
    else if (data === 'add_expense') {
        userState[chatId] = { step: 'add_expense_title' };
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:');
    }
    else if (data === 'back_to_management') {
        // –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const managementMenu = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data: 'add_product' }],
                    [{ text: 'üí∞ –†–∞—Å—Ö–æ–¥—ã', callback_data: 'expenses_menu' }],
                    [{ text: 'üë®‚Äçüç≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
                    [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                ],
            }),
        };
        await sendMessageWithDelete(chatId, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', managementMenu);
    }
    else if (data === 'orders_list') {
        await displayOrdersList(chatId);
    }
    else if (data === 'my_orders') {
        await displayMyOrders(chatId);
    }
    else if (data.startsWith('cancel_order_')) {
        const orderId = data.split('_')[2];
        console.log(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞: ${orderId}`);

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–æ –æ—Ç–º–µ–Ω—ã
            const currentOrderResponse = await axios.get(`http://api:5000/api/orders/${orderId}`);
            const currentOrder = currentOrderResponse.data.order || currentOrderResponse.data;
            console.log(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞:`, currentOrder);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–û—Ç–º–µ–Ω—ë–Ω"
            const cancelResponse = await axios.put(`http://api:5000/api/orders/${orderId}`, {
                status: '–û—Ç–º–µ–Ω—ë–Ω'
            });
            const updatedOrder = cancelResponse.data.order || cancelResponse.data;
            console.log(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω:`, updatedOrder);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            const productPromises = currentOrder.products.map(async prod => {
                try {
                    const productResponse = await axios.get(`http://api:5000/api/products/${prod.productId}`);
                    return {
                        ...prod,
                        name: productResponse.data.name,
                        chefId: productResponse.data.chefId
                    };
                } catch (err) {
                    console.error(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ ${prod.productId}:`, err.message);
                    return prod;
                }
            });

            const products = await Promise.all(productPromises);
            console.log(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö:`, products);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const timestamp = new Date().toLocaleString('ru-RU', {
                timeZone: 'Europe/Moscow',
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            const baseNotification =
                `‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n\n` +
                `üì¶ –ó–∞–∫–∞–∑ ‚Ññ${orderId.slice(-4)}\n` +
                `üïí –í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã: ${timestamp}\n\n` +
                `üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: ${updatedOrder.totalAmount} ‚ÇΩ\n` +
                `üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${updatedOrder.shippingAddress}\n\n` +
                `üìã –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n`;

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            const productsInfo = products.map((prod, index) =>
                `${index + 1}. ${prod.name || '–¢–æ–≤–∞—Ä'} x${prod.quantity} ‚Äî ${prod.price} ‚ÇΩ`
            ).join('\n');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            if (updatedOrder.clientId) {
                const clientNotification =
                    `${baseNotification}${productsInfo}\n\n` +
                    `‚ùóÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n` +
                    `üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${updatedOrder.description || '–ù–µ—Ç'}\n` +
                    `üìû –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–≤–∞—Ä–æ–º: ${updatedOrder.chefPhone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'}`;

                try {
                    await bot.sendMessage(updatedOrder.clientId, clientNotification);
                    console.log(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${updatedOrder.clientId}`);
                } catch (error) {
                    console.error(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ${updatedOrder.clientId}:`, error.message);
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤–∞—Ä–∞–º
            const uniqueChefIds = [...new Set(products.map(p => p.chefId))];
            console.log(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –ù–∞–π–¥–µ–Ω—ã –ø–æ–≤–∞—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, uniqueChefIds);

            for (const chefId of uniqueChefIds) {
                if (chefId) {
                    const chefNotification =
                        `${baseNotification}${productsInfo}\n\n` +
                        `‚ùóÔ∏è –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n` +
                        `üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${updatedOrder.description || '–ù–µ—Ç'}\n` +
                        `üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:\n` +
                        `   –¢–µ–ª–µ—Ñ–æ–Ω: ${updatedOrder.contactPhone || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                        `   Telegram: ${updatedOrder.telegramId ? '@' + updatedOrder.telegramId : '–ù–µ —É–∫–∞–∑–∞–Ω'}`;

                    try {
                        await bot.sendMessage(chefId, chefNotification);
                        console.log(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤–∞—Ä—É ${chefId}`);
                    } catch (error) {
                        console.error(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–≤–∞—Ä—É ${chefId}:`, error.message);
                    }
                }
            }

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑
            await sendMessageWithDelete(chatId, `–ó–∞–∫–∞–∑ ‚Ññ${orderId.slice(-4)} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω! ‚ùå`);

        } catch (error) {
            console.error(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –û—à–∏–±–∫–∞:`, error.message);
            if (error.response?.data) {
                console.error(`[–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞] –û—à–∏–±–∫–∞ API:`, error.response.data);
            }
            await sendMessageWithDelete(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ ${orderId}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
        }
    }
    else if (data === 'view_products') {
        try {
            const response = await axios.get('http://api:5000/api/products');
            const products = response.data;
            if (products.length === 0) {
                await sendMessageWithDelete(chatId, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
                return;
            }
            const productButtons = products.map((product, index) => {
                return [{ text: product.name, callback_data: `product_${index}` }];
            });
            productButtons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
            userState[chatId] = { step: 'select_product', products };
            await sendMessageWithDelete(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', { reply_markup: JSON.stringify({ inline_keyboard: productButtons }) });
        } catch (error) {
            console.error('Error fetching products:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.');
        }
    }
    else if (data.startsWith('view_expense_')) {
        try {
            const expenseId = data.split('view_expense_')[1];
            const response = await axios.get(`http://api:5000/api/expenses/${expenseId}`);
            const expense = response.data;

            let expenseDetails = `üìã –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞:\n\n`;
            expenseDetails += `üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: ${expense.title}\n`;
            expenseDetails += `üí∞ –°—É–º–º–∞: ${expense.amount} ‚ÇΩ\n`;
            expenseDetails += `üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${expense.category}\n`;
            expenseDetails += `üìÖ –î–∞—Ç–∞: ${new Date(expense.date).toLocaleDateString()}\n`;
            if (expense.description) {
                expenseDetails += `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${expense.description}\n`;
            }

            const keyboard = {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: 'üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', callback_data: `delete_expense_${expenseId}` }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'view_expenses' }]
                    ]
                })
            };

            await sendMessageWithDelete(chatId, expenseDetails, keyboard);
        } catch (error) {
            console.error('Error fetching expense details:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Ö–æ–¥–∞.');
        }
    }
// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
    else if (data.startsWith('delete_expense_')) {
        try {
            const expenseId = data.split('delete_expense_')[1];

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            const confirmKeyboard = {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_expense_${expenseId}` },
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `view_expense_${expenseId}` }
                        ]
                    ]
                })
            };

            await sendMessageWithDelete(chatId, '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?', confirmKeyboard);
        } catch (error) {
            console.error('Error preparing expense deletion:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–∞.');
        }
    }
// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    else if (data.startsWith('confirm_delete_expense_')) {
        try {
            const expenseId = data.split('confirm_delete_expense_')[1];
            await axios.delete(`http://api:5000/api/expenses/${expenseId}`);

            await sendMessageWithDelete(chatId, '–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(async () => {
                try {
                    const response = await axios.get(`http://api:5000/api/expenses/chef/${chatId}`);
                    const expenses = response.data;

                    if (expenses.length === 0) {
                        await sendMessageWithDelete(chatId, '–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.');
                        return;
                    }

                    // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
                    const totalAmount = expenses.reduce((sum, expense) => sum + (expense.amount || 0), 0);
                    let expensesList = '–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n\n';
                    expensesList += `üíµ –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${totalAmount} ‚ÇΩ\n\n`;
                    expensesList += '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–∞—Å—Ö–æ–¥ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n';

                    const inlineKeyboard = expenses.map(expense => ([{
                        text: `${expense.title} - ${expense.amount} ‚ÇΩ`,
                        callback_data: `view_expense_${expense._id}`
                    }]));
                    inlineKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'expenses_menu' }]);

                    const keyboard = {
                        reply_markup: JSON.stringify({
                            inline_keyboard: inlineKeyboard
                        })
                    };

                    await sendMessageWithDelete(chatId, expensesList, keyboard);
                } catch (error) {
                    console.error('Error refreshing expenses list:', error);
                    await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.');
                }
            }, 1000);
        } catch (error) {
            console.error('Error deleting expense:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.');
        }
    }
    else if (data.startsWith('product_')) {
        const index = parseInt(data.split('_')[1], 10);
        const selectedProduct = userState[chatId].products[index];
        const productInfo = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: ${selectedProduct.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${selectedProduct.description}\n–¶–µ–Ω–∞: ${selectedProduct.price} ‚ÇΩ`;
        userState[chatId] = { step: 'view_product', selectedProduct, products: userState[chatId].products };
        const productActionButtons = {
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [
                        { text: 'üõç –ö—É–ø–∏—Ç—å', callback_data: 'buy_product' },
                        { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_products' }
                    ]
                ]
            }),
        };
        if (selectedProduct.filename || selectedProduct.image) {
            try {
                const filename = selectedProduct.filename || selectedProduct.image;
                const imageResponse = await axios.get(`http://api:5000/api/images/file/${filename}`, { responseType: 'arraybuffer' });
                await sendPhotoWithDelete(chatId, Buffer.from(imageResponse.data), { caption: productInfo, ...productActionButtons });
            } catch (error) {
                console.error('Error sending photo:', error);
                await sendMessageWithDelete(chatId, productInfo, productActionButtons);
            }
        } else {
            await sendMessageWithDelete(chatId, productInfo, productActionButtons);
        }
    }
    else if (data === 'back_to_products') {
        const products = userState[chatId].products;
        const productButtons = products.map((product, index) => {
            return [{ text: product.name, callback_data: `product_${index}` }];
        });
        productButtons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
        userState[chatId].step = 'select_product';
        await sendMessageWithDelete(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', { reply_markup: JSON.stringify({ inline_keyboard: productButtons }) });
    }
    else if (data === 'back_to_main') {
        userState[chatId] = { step: 'main_menu' };
        await sendMessageWithDelete(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üëãü•©üêüüçûü•ìüç≤', mainMenu);
    }
    else if (data === 'buy_product') {
        console.log(`[buy_product] Starting purchase process for chat ${chatId}`);
        console.log(`[buy_product] Current user state:`, userState[chatId]);

        userState[chatId].step = 'enter_quantity';
        console.log(`[buy_product] Updated user state:`, userState[chatId]);

        await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:');
    }
    else if (data === 'add_product') {
        userState[chatId] = { step: 'add_product_name' };
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: (–ø—Ä–∏–º–µ—Ä: ‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç)');
    }
    else if (data === 'help') {
        await sendMessageWithDelete(chatId, '–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n2. –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç');
    }
});

// Function to display all orders (non-filtered). Sets orderListType to "all"
async function displayOrdersList(chatId) {
    const ordersUrl = `http://api:5000/api/orders/client/${chatId}`;
    console.log(`[Orders List] Requesting orders from URL: ${ordersUrl}`);
    try {
        const response = await axios.get(ordersUrl);
        let orders = [];
        if (Array.isArray(response.data)) orders = response.data;
        else if (response.data.orders) orders = response.data.orders;
        if (orders.length === 0) {
            await sendMessageWithDelete(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.');
            return;
        }
        userState[chatId] = userState[chatId] || {};
        userState[chatId].orderListType = 'all';
        console.log('[Orders List] Returned orders:', JSON.stringify(orders, null, 2));
        const inlineKeyboard = orders.map(order => {
            const orderIdShort = order._id.slice(-4);
            return [{
                text: `‚Ññ${orderIdShort} ‚Ä¢ ${order.totalAmount} ‚ÇΩ ‚Ä¢ ${order.status}`,
                callback_data: `view_order_${order._id}`
            }];
        });
        inlineKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
        const keyboardOptions = { inline_keyboard: inlineKeyboard };
        await sendMessageWithDelete(chatId, '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:', { reply_markup: JSON.stringify(keyboardOptions) });
    } catch (error) {
        console.error('[Orders List] Error fetching orders:', error.message);
        await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.');
    }
}

// Function to display "my orders" (orders with at least one product where chefId equals current chatId).
// Sets orderListType to "my_orders"
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–º–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤" (–∑–∞–∫–∞–∑—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö chefId —Ä–∞–≤–µ–Ω —Ç–µ–∫—É—â–µ–º—É chatId)
// Function to display "my orders" (orders where chefId equals current chatId)
async function displayMyOrders(chatId) {
    console.log(`[My Orders] Starting displayMyOrders for chatId: ${chatId}`);
    const ordersUrl = `http://api:5000/api/orders/chef/${chatId}`;

    try {
        console.log(`[My Orders] Requesting orders from URL: ${ordersUrl}`);
        const response = await axios.get(ordersUrl);

        let orders = Array.isArray(response.data) ? response.data :
            (response.data.orders || []);

        console.log(`[My Orders] Retrieved ${orders.length} orders for chef ${chatId}`);

        if (orders.length === 0) {
            await sendMessageWithDelete(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –≥–¥–µ –≤—ã —É–∫–∞–∑–∞–Ω—ã –∫–∞–∫ –ø–æ–≤–∞—Ä.');
            return;
        }

        userState[chatId] = userState[chatId] || {};
        userState[chatId].orderListType = 'my_orders';

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–∫–∞–∑–∞–º–∏
        const inlineKeyboard = orders.map(order => {
            const orderIdShort = order._id.slice(-4);
            return [{
                text: `‚Ññ${orderIdShort} ‚Ä¢ ${order.totalAmount} ‚ÇΩ ‚Ä¢ ${order.status}`,
                callback_data: `view_order_${order._id}`
            }];
        });

        inlineKeyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);

        const keyboardOptions = { inline_keyboard: inlineKeyboard };

        await sendMessageWithDelete(
            chatId,
            '–ó–∞–∫–∞–∑—ã, –≥–¥–µ –≤—ã —É–∫–∞–∑–∞–Ω—ã –∫–∞–∫ –ø–æ–≤–∞—Ä:',
            { reply_markup: JSON.stringify(keyboardOptions) }
        );

    } catch (error) {
        console.error('[My Orders] Error fetching orders:', error);
        if (error.response) {
            console.error('[My Orders] Error response:', error.response.data);
        }
        await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.');
    }
}


bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    if (text === 'üçû –ö–∞—Ç–∞–ª–æ–≥') {
        try {
            const response = await axios.get('http://api:5000/api/products');
            const products = response.data;
            if (products.length === 0) {
                await sendMessageWithDelete(chatId, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.');
                return;
            }
            const productButtons = products.map((product, index) => {
                return [{ text: product.name, callback_data: `product_${index}` }];
            });
            productButtons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]);
            userState[chatId] = { step: 'select_product', products, telegramId: msg.from.username };
            await sendMessageWithDelete(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', { reply_markup: JSON.stringify({ inline_keyboard: productButtons }) });
        } catch (error) {
            console.error('Error fetching products:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.');
        }
        return;
    }
    if (text === 'üìã –ó–∞–∫–∞–∑—ã') {
        await displayOrdersList(chatId);
        return;
    }
    if (text === '‚ùì –ü–æ–º–æ—â—å') {
        await sendMessageWithDelete(chatId,
            '–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n\n' +
            '1. üçû –ö–∞—Ç–∞–ª–æ–≥ - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n' +
            '2. üìã –ó–∞–∫–∞–∑—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (–ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞)\n' +
            '3. ‚ùì –ü–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
            '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏:\n' +
            '1. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥\n' +
            '2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä\n' +
            '3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å"\n' +
            '4. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞'
        );
        return;
    }
    if (text === '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ') {
        try {
            const userRole = await getUserRole(chatId);
            if (userRole !== 'chef') {
                console.log(`[–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤`);
                await sendMessageWithDelete(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.');
                return;
            }

            const managementMenu = {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data: 'add_product' }],
                        [{ text: 'üí∞ –†–∞—Å—Ö–æ–¥—ã', callback_data: 'expenses_menu' }], // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
                        [{ text: 'üë®‚Äçüç≥ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
                        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
                    ],
                }),
            };
            await sendMessageWithDelete(chatId, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', managementMenu);
        } catch (error) {
            console.error('[–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ] –û—à–∏–±–∫–∞:', error.message);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
        }
        return;
    }
    if (!userState[chatId]) {
        return;
    }
    if (userState[chatId].step === 'add_product_name') {
        userState[chatId].productName = text;
        userState[chatId].step = 'add_product_description';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId].step === 'add_product_description') {
        userState[chatId].productDescription = text;
        userState[chatId].step = 'add_product_price';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId].step === 'add_product_price') {
        const price = parseFloat(text);
        if (isNaN(price) || price <= 0) {
            await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞.');
        } else {
            userState[chatId].productPrice = price;
            userState[chatId].step = 'add_product_category';
            await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:');
        }
    } else if (userState[chatId].step === 'add_product_category') {
        userState[chatId].productCategory = text;
        userState[chatId].step = 'add_product_image';
        await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    }
    else if (userState[chatId].step === 'add_expense_title') {
        userState[chatId].expenseTitle = text;
        userState[chatId].step = 'add_expense_amount';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:');
    }
    else if (userState[chatId].step === 'add_expense_amount') {
        const amount = parseFloat(text);
        if (isNaN(amount) || amount < 0) {
            await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');
            return;
        }
        userState[chatId].expenseAmount = amount;
        userState[chatId].step = 'add_expense_category';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:');
    }
    else if (userState[chatId].step === 'add_expense_category') {
        userState[chatId].expenseCategory = text;
        userState[chatId].step = 'add_expense_description';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
    }
    else if (userState[chatId].step === 'add_expense_description') {
        try {
            const expenseData = {
                chefId: chatId.toString(),
                title: userState[chatId].expenseTitle,
                amount: userState[chatId].expenseAmount,
                category: userState[chatId].expenseCategory,
                description: text === '-' ? '' : text,
                date: new Date()
            };

            await axios.post('http://api:5000/api/expenses', expenseData);
            await sendMessageWithDelete(chatId, '‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–∞—Å—Ö–æ–¥–æ–≤
            setTimeout(async () => {
                const expensesMenu = {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{ text: 'üìä –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã', callback_data: 'view_expenses' }],
                            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', callback_data: 'add_expense' }],
                            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_management' }]
                        ],
                    }),
                };
                await sendMessageWithDelete(chatId, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏:', expensesMenu);
            }, 1000);

            delete userState[chatId];
        } catch (error) {
            console.error('Error creating expense:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.');
        }
    }

    else if (userState[chatId].step === 'add_product_image' && msg.photo) {
        const photo = msg.photo[msg.photo.length - 1];
        const fileId = photo.file_id;
        try {
            const fileLink = await bot.getFileLink(fileId);
            const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
            const buffer = Buffer.from(response.data);
            const timestamp = Date.now();
            const filename = `${timestamp}.jpg`;
            const form = new FormData();
            form.append('image', buffer, { filename: filename, contentType: 'image/jpeg' });
            const imageResponse = await axios.post('http://api:5000/api/images/upload', form, { headers: form.getHeaders() });
            const newProduct = {
                name: userState[chatId].productName,
                description: userState[chatId].productDescription,
                price: userState[chatId].productPrice,
                category: userState[chatId].productCategory,
                image: imageResponse.data.image.filename,
                chefId: chatId.toString()
            };
            await axios.post('http://api:5000/api/products', newProduct);
            await sendMessageWithDelete(chatId, `–ü—Ä–æ–¥—É–∫—Ç "${newProduct.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
            setTimeout(async () => {
                await sendMessageWithDelete(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! üëãü•©üêüüçûü•ìüç≤', mainMenu);
            }, 2000);
            delete userState[chatId];
        } catch (error) {
            console.error('Error creating product:', error);
            await sendMessageWithDelete(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.');
        }
    } else if (userState[chatId].step === 'enter_quantity') {
        console.log(`[enter_quantity] Processing quantity for chat ${chatId}`);
        console.log(`[enter_quantity] Current state:`, userState[chatId]);

        const quantity = parseInt(text);
        if (isNaN(quantity) || quantity <= 0) {
            console.log(`[enter_quantity] Invalid quantity entered: ${text}`);
            await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ).');
            return;
        }

        console.log(`[enter_quantity] Valid quantity entered: ${quantity}`);
        userState[chatId].quantity = quantity;
        userState[chatId].step = 'enter_description';
        console.log(`[enter_quantity] Updated state:`, userState[chatId]);

        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–∫–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è):');
    } else if (userState[chatId].step === 'enter_description') {
        userState[chatId].description = text;
        userState[chatId].step = 'enter_phone';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:');
    } else if (userState[chatId].step === 'enter_phone') {
        if (!/^\+?\d{10,12}$/.test(text.replace(/\s/g, ''))) {
            await sendMessageWithDelete(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-12 —Ü–∏—Ñ—Ä).');
            return;
        }
        userState[chatId].phone = text;
        userState[chatId].step = 'enter_address';
        await sendMessageWithDelete(chatId, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:');
    } else if (userState[chatId].step === 'enter_address') {
        try {
            const order = {
                clientId: chatId.toString(),
                telegramId: msg.from.username || null,
                phone: userState[chatId].phone,
                products: [{
                    productId: userState[chatId].selectedProduct._id,
                    name: userState[chatId].selectedProduct.name,
                    quantity: userState[chatId].quantity,
                    price: userState[chatId].selectedProduct.price,
                }],
                description: userState[chatId].description,
                status: '–ù–æ–≤—ã–π',
                totalAmount: userState[chatId].selectedProduct.price * userState[chatId].quantity,
                paymentStatus: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                paymentMethod: '–ù–∞–ª–∏—á–Ω—ã–µ',
                paymentDetails: { paidAmount: 0, paymentDate: null, transactionId: null, paymentProvider: null, receiptNumber: null },
                shippingAddress: text,
                deliveryInfo: { type: '–ö—É—Ä—å–µ—Ä', trackingNumber: null, courierName: null, courierPhone: null, estimatedDeliveryDate: null, actualDeliveryDate: null, deliveryInstructions: userState[chatId].description },
                contactEmail: `${chatId}@telegram.com`,
                contactPhone: userState[chatId].phone,
                statusHistory: [{ status: '–ù–æ–≤—ã–π', timestamp: new Date(), comment: '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞', updatedBy: 'system' }],
                chefId: userState[chatId].selectedProduct.chefId
            };

            console.log('[Order Creation] Creating order with data:', JSON.stringify(order, null, 2));
            const createResponse = await axios.post('http://api:5000/api/orders', order);
            const createdOrder = createResponse.data;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            let orderInfo = `–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n` +
                `–ü—Ä–æ–¥—É–∫—Ç: ${userState[chatId].selectedProduct.name}\n` +
                `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${userState[chatId].quantity}\n` +
                `–°—É–º–º–∞: ${order.totalAmount} ‚ÇΩ\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: ${userState[chatId].phone}\n` +
                `–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${text}\n` +
                `–û–ø–∏—Å–∞–Ω–∏–µ: ${userState[chatId].description}\n\n` +
                `–°—Ç–∞—Ç—É—Å: ${order.status}\n` +
                `–û–ø–ª–∞—Ç–∞: ${order.paymentStatus}\n\n` +
                `–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n`;

            order.products.forEach((prod, index) => {
                const prodName = prod.name || prod.productName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç';
                orderInfo += `  ${index + 1}. ${prodName} x ${prod.quantity} ‚Äî ${prod.price} ‚ÇΩ –∑–∞ —à—Ç, –ò—Ç–æ–≥–æ: ${prod.price * prod.quantity} ‚ÇΩ\n`;
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            await sendMessageWithDelete(chatId, orderInfo);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤–∞—Ä—É
            if (order.chefId) {
                try {
                    const chefNotification =
                        `üîî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ${createdOrder._id || order._id}!\n\n` +
                        `üì¶ –ü—Ä–æ–¥—É–∫—Ç: ${userState[chatId].selectedProduct.name}\n` +
                        `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${userState[chatId].quantity}\n` +
                        `üí∞ –°—É–º–º–∞: ${order.totalAmount} ‚ÇΩ\n\n` +
                        `üìù –°—Ç–∞—Ç—É—Å: ${order.status}\n` +
                        `üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${text}\n` +
                        `üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${order.description || '–ù–µ—Ç'}\n\n` +
                        `üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞:\n` +
                        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${order.contactPhone}\n` +
                        (order.telegramId ? `üìß Telegram: @${order.telegramId}` : '');

                    await bot.sendMessage(order.chefId, chefNotification);
                    console.log(`[Order Creation] Chef notification sent to ${order.chefId}`);
                } catch (notificationError) {
                    console.error('[Order Creation] Error sending chef notification:', notificationError);
                    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–∞–∑ —É–∂–µ —Å–æ–∑–¥–∞–Ω
                }
            }

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            setTimeout(async () => {
                await sendMessageWithDelete(chatId, '–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', mainMenu);
            }, 2000);
            delete userState[chatId];

        } catch (error) {
            console.error('[Order Creation] Error:', error);
            const errorMessage = error.response?.data?.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞';
            await sendMessageWithDelete(chatId, `–û—à–∏–±–∫–∞: ${errorMessage}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);

            setTimeout(async () => {
                await sendMessageWithDelete(chatId, '–ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', mainMenu);
            }, 2000);
        }
    }
});

app.listen(5001, () => {
    console.log('Telegram bot is running on port 5001');
});