require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const express = require('express');
const FormData = require('form-data');
const app = express();

// –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) {
    console.error('Telegram bot token is missing in the environment variables.');
    process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è)
const userState = {};

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
const mainMenu = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{ text: 'üõí–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã', callback_data: 'view_products' }],
            [{ text: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç', callback_data: 'add_product' }],
            [{ text: '–ü–æ–º–æ—â—å', callback_data: 'help' }]
        ]
    })
};

// –ö–æ–º–∞–Ω–¥–∞ /start (–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–≥–æ:', mainMenu);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data === 'view_products') {
        try {
            const response = await axios.get('http://api:5000/api/products');
            const products = response.data;

            const productButtons = products.map((product, index) => {
                return [{ text: product.name, callback_data: `product_${index}` }];
            });

            userState[chatId] = { step: 'select_product', products };
            bot.sendMessage(chatId, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', {
                reply_markup: JSON.stringify({
                    inline_keyboard: productButtons
                })
            });
        } catch (error) {
            console.error('Error fetching products:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.');
        }
    } else if (data.startsWith('product_')) {
        const index = parseInt(data.split('_')[1], 10);
        const selectedProduct = userState[chatId].products[index];
        const productInfo = `–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç: ${selectedProduct.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: ${selectedProduct.description}\n–¶–µ–Ω–∞: ${selectedProduct.price} ‚ÇΩ`;

        console.log('Selected product data:', selectedProduct);

        if (selectedProduct.filename || selectedProduct.image) {
            try {
                const filename = selectedProduct.filename || selectedProduct.image;
                // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞—à–µ–≥–æ API
                const imageResponse = await axios.get(`http://api:5000/api/images/file/${filename}`, {
                    responseType: 'arraybuffer'
                });

                console.log('Image response received, content length:', imageResponse.data.length);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram –Ω–∞–ø—Ä—è–º—É—é
                await bot.sendPhoto(chatId, Buffer.from(imageResponse.data), {
                    caption: productInfo
                });
            } catch (error) {
                console.error('Error sending photo:', error);
                console.error('Error details:', error.response?.data);
                bot.sendMessage(chatId, productInfo);
            }
        } else {
            bot.sendMessage(chatId, productInfo);
        }
    } else if (data === 'add_product') {
        userState[chatId] = { step: 'add_product_name' };
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (data === 'help') {
        bot.sendMessage(chatId, '–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n2. –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\n3. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞)
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (userState[chatId] && userState[chatId].step === 'add_product_name') {
        userState[chatId].productName = text;
        userState[chatId].step = 'add_product_description';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId] && userState[chatId].step === 'add_product_description') {
        userState[chatId].productDescription = text;
        userState[chatId].step = 'add_product_price';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId] && userState[chatId].step === 'add_product_price') {
        const price = parseFloat(text);
        if (isNaN(price) || price <= 0) {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞.');
        } else {
            userState[chatId].productPrice = price;
            userState[chatId].step = 'add_product_category';
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞:');
        }
    } else if (userState[chatId] && userState[chatId].step === 'add_product_category') {
        userState[chatId].productCategory = text;
        userState[chatId].step = 'add_product_image';
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:');
    } else if (userState[chatId] && userState[chatId].step === 'add_product_image' && msg.photo) {
        const photo = msg.photo[msg.photo.length - 1]; // –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        const fileId = photo.file_id;

        try {
            const fileLink = await bot.getFileLink(fileId);
            console.log('Telegram file link:', fileLink);

            const response = await axios.get(fileLink, { responseType: 'arraybuffer' });
            console.log('Image downloaded, size:', response.data.length);

            const buffer = Buffer.from(response.data);
            const timestamp = Date.now();
            const filename = `${timestamp}.jpg`;

            const form = new FormData();
            form.append('image', buffer, {
                filename: filename,
                contentType: 'image/jpeg'
            });

            console.log('Uploading image with filename:', filename);

            const imageResponse = await axios.post('http://api:5000/api/images/upload', form, {
                headers: form.getHeaders()
            });

            console.log('Image upload response data:', imageResponse.data);

            const newProduct = {
                name: userState[chatId].productName,
                description: userState[chatId].productDescription,
                price: userState[chatId].productPrice,
                category: userState[chatId].productCategory,
                image: imageResponse.data.image.filename,
                filename: imageResponse.data.image.filename
            };

            console.log('New product data before sending:', newProduct);

            try {
                const productResponse = await axios.post('http://api:5000/api/products', newProduct);
                console.log('Product creation response data:', productResponse.data);

                // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                const createdProduct = await axios.get(`http://api:5000/api/products/${productResponse.data._id}`);
                console.log('Created product data:', createdProduct.data);

                bot.sendMessage(chatId, `–ü—Ä–æ–¥—É–∫—Ç "${newProduct.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í–æ—Ç —á—Ç–æ —É –Ω–∞—Å —Å–µ–π—á–∞—Å –µ—Å—Ç—å –≤–∫—É—Å–Ω–µ–Ω—å–∫–æ–≥–æ:', mainMenu);
            } catch (error) {
                console.error('Error adding product:', error);
                console.error('Error response data:', error.response?.data);
                bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.');
            }

            delete userState[chatId];  // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        } catch (error) {
            console.error('Error downloading or uploading image:', error);
            console.error('Error response data:', error.response?.data);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
        }
    }
});

// –ù–∞—Å—Ç—Ä–æ–∏–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
app.listen(5001, () => {
    console.log('Telegram bot is running on port 5001');
});